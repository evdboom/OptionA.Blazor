using Microsoft.AspNetCore.Components;
using OptionA.Blazor.Blog;
using OptionA.Blazor.Blog.Services;

namespace OptionA.Blazor.Test.Pages;

public partial class BlogBuilder
{
    [Inject]
    private IBuilderService BuilderService { get; set; } = default!;

    private Post? _post;

    protected override void OnInitialized()
    {
        var json = """"
            {"Tags":["Blazor","Components"],"Date":"2025-03-09T00:00:00+01:00","Title":"OptionA.Blazor.Components.Direct","Subtitle":"Blazor components to be used without requiring additional setup.","Content":[{"Type":"Header","Content":"General","Size":1},{"Type":"Paragraph","Content":"The OptionA.Blazor.Components.Direct package holds several Blazor Components to be used without requiring additional setup. In contrast to the OptionA.Blazor.Components package which does reuire setup to correctly function. The source code is available on GitHub: [OptionA.Blazor.Components.Direct](https://github.com/evdboom/OptionA.Blazor/tree/main/OptionA.Blazor.Components.Direct)"},{"Type":"Header","Content":"Components","Size":1},{"Type":"Paragraph","Content":"The package currently has the following components. For most input components in this package they are a wrapper around the Microsoft.AspNetCore.Components.Forms components with some additional features and always inherited from the base OptAComponent compoent"},{"Type":"List","ListType":1,"Items":["[OptAComponent](/blogbuilder#optacomponent)\n[OptAEnumCheckboxGroup](/blogbuilder#optaenumcheckboxgroup)\n[OptAEnumRadioGroup](/blogbuilder#optaenumradiogroup)\n[OptAEnumSelect](/blogbuilder#optaenumselect)\n[OptAInputCheckbox](/documentation/componentsdirect/blogbuilder#optainputcheckbox)\n[OptAInputCheckboxGroup](/blogbuilder#optainputcheckboxgroup)\n[OptAInputInteger](/blogbuilder#optainputinteger)\n[OptAInputRadioGroup](/blogbuilder#optainputradiogroup)\n[OptAInputText](/blogbuilder#optainputtext)\n[OptAInputTextArea](/blogbuilder#optainputtextarea)\n[OptASelect](/blogbuilder#optaselect)\n",""]},{"Attributes":{"id":"optacomponent"},"Type":"Header","Content":"OptAComponent","Size":2},{"Type":"Paragraph","Content":"The OptAComponent is the base class for all OptionA components (both in the package and the OptionA.Blazor.Components package). It provides the following basic functionality:"},{"Type":"Header","Content":"Additional classes","Size":3},{"Type":"Paragraph","Content":"The OptAComponent has a [Parameter] called AdditionalClasses which takes a **string** parameter. It can be used to add additional classes to a specific instance of a OptAComponent to be added next to the default classes. If more then one class needs to be added seperate them using a space \u0027 \u0027. Classes are made distinct with any default classes, so they will not be added double."},{"Type":"Code","Code":"\u003COptAInputText AdditionalClasses=\u0022class-one class two\u0022/\u003E\n\u003C!-- \u003Cinput type=\u0022text\u0022 class=\u0022class-one class-two default-one\u0022/\u003E\n classes added to the default-one which is added through setup --\u003E\n ","Language":"Html"},{"Type":"Header","Content":"Removed classes","Size":3},{"Type":"Paragraph","Content":"Similar to the Additional classes, but the removed classes is used to remove default classes of a specific instance of a OptAComponent. It accepts a **IList** of **strings**."},{"Type":"Code","Code":"\u003COptAInputText RemovedClasses=@([\u0022default-one\u0022])/\u003E\n\u003C!-- \u003Cinput type=\u0022text\u0022 /\u003E no class left --\u003E\n ","Language":"Html"},{"Type":"Header","Content":"Attributes","Size":3},{"Type":"Paragraph","Content":"The Attributes [Parameter] can be used to add additional attributes to the component. \n**note** *In general classes are applied after setting the attributes, so setting the class attribute through this parameter will get overwritten if the component has default classes or additional classes*\n\nThe parameter takes a **Dictionary** of types **string**, **object?**."},{"Type":"Code","Code":"\u003COptAInputText Attributes=@(new Dictionary\u003Cstring, object?\u003E \n    { \n        [\u0022attribute-one\u0022] = true, \n        [\u0022attribute-two\u0022] = \u0022pineapple\u0022\n    })/\u003E\n\u003C!-- \u003Cinput type=\u0022text\u0022 attribute-one attribute-two=\u0022pineapple\u0022 /\u003E \n attributes added to the component --\u003E\n\n","Language":"Html"},{"Attributes":{"id":"optaenumcheckboxgroup"},"Type":"Header","Content":"OptAEnumCheckboxGroup","Size":2},{"Type":"Paragraph","Content":"The OptAEnumCheckboxGroup creates a list of checkboxes (implementation of *Microsoft.AspNetCore.Components.Forms.InputCheckBox*) for each of the enum values in the given enum. \n\nFor the following enum:"},{"Type":"Code","Code":"public enum ExampleEnum\n{\n    Strawberries,\n    Blueberries,\n    Raspberries,\n    Blackberries\n}\n ","Language":"CSharp"},{"Type":"Code","Code":"\u003COptAEnumCheckboxGroup TEnum=\u0022ExampleEnum\u0022/\u003E\n ","Language":"Html"},{"Type":"Paragraph","Content":"The component is rendered as:"},{"Type":"Header","Content":"Parameters","Size":3},{"Type":"Paragraph","Content":"The following parameters can be set on the component:\n**Value** and **ValueChanged** An IEnumerable\u003CTEnum\u003E of the bound enum with the selected values. can be used in the @bind-Value to bind to the selected values.\n\n**NameMappings** an optional attribute of type Dictionary\u003CTEnum, string\u003E where alternative display names can be mapped for the given enum values.\n\n**TitleMappings** similar to the *NameMappings*, but used to set the title attribute of the given enum values.\n\n**OrderMode** is an Enum which can be set to"},{"Type":"List","ListType":1,"Items":["Value: Order by enum valuee","Name: Order by name of the enum value","DisplayValue: Order by the set display values (name mappings)",""]},{"Type":"Paragraph","Content":"**OrderDescending** set to true to invert the order\n\n**Orientation** en Enum to render the options vertically or horizontally (uses FlexBox to set the orientation)."},{"Attributes":{"id":"optaenumradiogroup"},"Type":"Header","Content":"OptAEnumRadioGroup","Size":2},{"Type":"Paragraph","Content":"Very similar to the *OptAEnumCheckboxGroup* but creates a list of radiobuttons instead (single select)"},{"Type":"Code","Code":"\u003COptAEnumRadioGroup TEnum=\u0022ExampleEnum\u0022/\u003E\n ","Language":"Html"},{"Type":"Paragraph","Content":"results in:"},{"Type":"Paragraph","Content":"The parameters are the same as for *OptAEnumCheckboxGroup*. with the exception that Value is a single TEnum."},{"Attributes":{"id":"optaenumselect"},"Type":"Header","Content":"OptAEnumSelect","Size":2},{"Type":"Paragraph","Content":"Again very similar, but instead of radiobuttons the *OptAEnumSelect* Creates an dropdown, implements the *Microsoft.AspNetCore.Components.Forms.InputSelect*. Same as the radiobuttons, the Value is a single enum element."},{"Type":"Code","Code":"\u003COptAEnumRadioGroup TEnum=\u0022ExampleEnum\u0022/\u003E","Language":"Html"},{"Type":"Paragraph","Content":"results in:"},{"Attributes":{"id":"optainputcheckbox"},"Type":"Header","Content":"OptAInputCheckBox","Size":2},{"Type":"Paragraph","Content":"The *OptAInputCheckBox* Is an implementation of the *Microsoft.AspNetCore.Components.Forms.InputCheckBox* wrapped in an *OptAComponent*. Additionally if the **Description** parameter is filled a label will be places before the checkbox.\n\nExample:"},{"Type":"Code","Code":"\u003COptAInputCheckbox Description=\u0022Click me\u0022/\u003E","Language":"Html"},{"Type":"Paragraph","Content":"results in:"},{"Type":"Header","Content":"Parameters","Size":3},{"Type":"Paragraph","Content":"The following parameters can be set on the component:\n**Value** and **ValueChanged** A boolean to bound the checked value to.\n\n**Description** Description for the checkbox, will be placed before the actual checkbox."},{"Attributes":{"id":"optainputcheckboxgroup"},"Type":"Header","Content":"OptAInputCheckBoxGroup","Size":2},{"Type":"Paragraph","Content":"Generic version of the *OptAEnumCheckboxGroup* where a typeparam can be given for the list of items to be selected. Will generate a checkbox for each of the given items. "},{"Type":"Code","Code":"\u003COptAInputCheckboxGroup TValue=\u0022TestObject\u0022\n                        Items=\u0022_items\u0022\n                        OrderComparer=\u0022_comparer\u0022/\u003E","Language":"Html"},{"Type":"Paragraph","Content":"with"},{"Type":"Code","Code":"private readonly IEnumerable\u003CTestObject\u003E _items =\n[\n    new TestObject\n    {\n        Name = \u0022Test3\u0022,\n        Value = \u0022Test3_2\u0022,\n        ValueInt = 4\n    },\n    new TestObject\n    {\n        Name = \u0022Test1\u0022,\n        Value = \u0022Test1_2\u0022,\n        ValueInt = 1\n    },\n    new TestObject\n    {\n        Name = \u0022Test4\u0022,\n        Value = \u0022Test4_2\u0022,\n        ValueInt = 8\n    },\n    new TestObject\n    {\n        Name = \u0022Test2\u0022,\n        Value = \u0022Test2_2\u0022,\n        ValueInt = 2\n    }\n];\n\nprivate readonly TestObjectComparer _comparer = new TestObjectComparer();\n\npublic class TestObject\n{\n    public string? Name { get; set; }\n    public string? Value { get; set; }\n    public int ValueInt { get; set; }\n}\n\npublic class TestObjectComparer : IComparer\u003CTestObject\u003E\n{\n    public int Compare(TestObject? x, TestObject? y)\n    {\n        return (x?.ValueInt ?? 0) - (y?.ValueInt ?? 0);\n    }\n}","Language":"CSharp"},{"Type":"Paragraph","Content":"results in"},{"Type":"Header","Content":"Parameters","Size":3},{"Type":"Paragraph","Content":"In addition to the parameters of the *OptaEnumCheckboxGroup* the following parameters can be used.\n\n**OrderComparer** When you want to use custom ordering (default is the order of the list of items given to the component. You can add this. It must be an implementation of the *IComparer* interface for the given typeparam.\n\n**Items** Items to display to select, default will be all the items cast a a string, or if the *DisplayValue* parameter is set, that will be used.\n"}]}
            """";
        _post = BuilderService.CreateFromJson(json);

    }

    private void OnPostChanged(Post? post) 
    {
        _post = post;
        InvokeAsync(StateHasChanged);
    }
}
